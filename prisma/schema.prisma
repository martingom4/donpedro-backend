generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ──────────────────────────────
//  ENUMS (validan estados)
// ──────────────────────────────
enum CartStatus {
  active
  converted
  expired
}

enum OrderStatus {
  pending
  prepared
  delivered
  cancelled
}

// ──────────────────────────────
//  AUTENTICACIÓN Y ROLES
// ──────────────────────────────
model Role {
  id    Int    @id @default(autoincrement())
  code  String @unique
  name  String
  users User[]
}

model User {
  id     String @id @default(uuid())
  roleId Int
  role   Role   @relation(fields: [roleId], references: [id])

  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  refreshTokens UserRefreshToken[]
  blacklisted   AccessTokenBlacklist[]
  carts         Cart[]
  orders        CustomerOrder[]
  loyaltyPoints LoyaltyPoint[]
}

model UserRefreshToken {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  tokenHash      String             @unique // SHA-256 del refresh JWT
  expiresAt      DateTime
  revokedAt      DateTime?
  createdByIp    String? // INET → String en Prisma
  replacedById   Int?
  replacedBy     UserRefreshToken?  @relation("TokenRotation", fields: [replacedById], references: [id])
  replacedTokens UserRefreshToken[] @relation("TokenRotation")
}

model AccessTokenBlacklist {
  jti       String   @id // UUID del access-token (claim jti)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  expiresAt DateTime
  reason    String?
}

// ──────────────────────────────
//  CATÁLOGO
// ──────────────────────────────
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Product {
  id         Int      @id @default(autoincrement())
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  imageUrl    String?
  stock       Int     @default(0)
  isActive    Boolean @default(true)

  promotions PromotionProduct[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}

// ──────────────────────────────
//  PROMOCIONES (M-N)
// ──────────────────────────────
model Promotion {
  id          Int                @id @default(autoincrement())
  title       String
  discountPct Decimal            @db.Decimal(4, 2)
  startDate   DateTime?          @db.Date
  endDate     DateTime?          @db.Date
  products    PromotionProduct[]
}

model PromotionProduct {
  promotionId Int
  productId   Int

  promotion Promotion @relation(fields: [promotionId], references: [id])
  product   Product   @relation(fields: [productId], references: [id])

  @@id([promotionId, productId]) // PK compuesta
}

// ──────────────────────────────
//  CARRITO
// ──────────────────────────────
model Cart {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  status    CartStatus @default(active)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  items CartItem[]

  @@unique([userId, status]) // 1 carrito por estado-usuario
}

model CartItem {
  id        Int @id @default(autoincrement())
  cartId    Int
  productId Int

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)

  @@unique([cartId, productId]) // evita duplicados en carrito
}

// ──────────────────────────────
//  PEDIDOS
// ──────────────────────────────
model CustomerOrder {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  totalAmount Decimal     @db.Decimal(10, 2)
  status      OrderStatus // ← enum corregido
  createdAt   DateTime    @default(now())

  items OrderItem[]
}

model OrderItem {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int

  order   CustomerOrder @relation(fields: [orderId], references: [id])
  product Product       @relation(fields: [productId], references: [id])

  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)

  @@unique([orderId, productId]) // 1 línea por producto-pedido
}

// ──────────────────────────────
//  FIDELIDAD
// ──────────────────────────────
model LoyaltyPoint {
  id     Int    @id @default(autoincrement())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  points    Int
  source    String
  createdAt DateTime @default(now())
}
